import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Filter } from "lucide-react";
import { Navigation } from "@/components/navigation";
import { CveTable } from "@/components/cve-table";
import { CveDetailModal } from "@/components/cve-detail-modal";
import { FilterPanel } from "@/components/filter-panel";
import { useToast } from "@/hooks/use-toast";
import type { Cve, CveFilters, CveStatusUpdate } from "@/types/cve";

export default function CveSearch() {
  const [searchTerm, setSearchTerm] = useState("");
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState<CveFilters>({
    limit: 100,
    offset: 0
  });
  const [selectedCve, setSelectedCve] = useState<Cve | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const { toast } = useToast();

  const { data: cves = [], isLoading } = useQuery<Cve[]>({
    queryKey: ["/api/cves", { ...filters, search: searchTerm }],
  });

  const handleSearch = () => {
    setFilters({ ...filters, search: searchTerm, offset: 0 });
  };

  const handleApplyFilters = () => {
    setFilters({ ...filters, offset: 0 });
    toast({
      title: "Filters Applied",
      description: "Search results have been updated.",
    });
  };

  const handleClearFilters = () => {
    setFilters({
      limit: 100,
      offset: 0
    });
    setSearchTerm("");
    toast({
      title: "Filters Cleared",
      description: "All search filters have been reset.",
    });
  };

  const handleViewDetails = (cve: Cve) => {
    setSelectedCve(cve);
    setIsModalOpen(true);
  };

  const handleExport = () => {
    toast({
      title: "Export Started",
      description: "Search results export has been initiated.",
    });
  };

  const handleExportToSheets = () => {
    toast({
      title: "Google Sheets Export",
      description: "Exporting search results to Google Sheets...",
    });
  };

  const handleStatusUpdate = async (cveId: string, updates: CveStatusUpdate) => {
    // TODO: Implement actual status update API call
    toast({
      title: "Status Updated",
      description: `CVE ${cveId} status has been updated.`,
    });
  };

  const handleBulkStatusUpdate = async (cveIds: string[], updates: CveStatusUpdate) => {
    // TODO: Implement actual bulk status update API call
    toast({
      title: "Bulk Status Update",
      description: `${cveIds.length} CVEs have been updated.`,
    });
  };

  const handleManageStatus = (cve: Cve) => {
    // TODO: Open status management dialog/modal
    toast({
      title: "Manage Status",
      description: `Opening status management for ${cve.cveId}...`,
    });
  };

  return (
    <div className="flex h-screen">
      <Navigation />
      
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Header */}
        <header className="bg-card border-b border-border p-4" data-testid="search-header">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-semibold">CVE Search</h2>
              <p className="text-muted-foreground">Search and filter CVE vulnerabilities</p>
            </div>
            <div className="flex items-center gap-4">
              {/* Search Bar */}
              <div className="relative">
                <Input
                  type="text"
                  placeholder="Search CVE ID, technology, or description..."
                  className="w-96 pl-10"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                  data-testid="input-cve-search"
                />
                <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              </div>
              <Button onClick={handleSearch} data-testid="button-search">
                Search
              </Button>
              <Button
                variant="outline"
                onClick={() => setShowFilters(!showFilters)}
                data-testid="button-toggle-filters"
              >
                <Filter className="h-4 w-4 mr-2" />
                Filters
              </Button>
            </div>
          </div>
        </header>
        
        {/* Content Area */}
        <main className="flex-1 p-6 overflow-auto">
          <div className="flex flex-col lg:flex-row gap-6">
            {showFilters && (
              <FilterPanel
                filters={filters}
                onFiltersChange={setFilters}
                onApplyFilters={handleApplyFilters}
                onClearFilters={handleClearFilters}
              />
            )}
            
            <CveTable
              cves={cves}
              isLoading={isLoading}
              onViewDetails={handleViewDetails}
              onExport={handleExport}
              onExportToSheets={handleExportToSheets}
              onStatusUpdate={handleStatusUpdate}
              onBulkStatusUpdate={handleBulkStatusUpdate}
              onManageStatus={handleManageStatus}
            />
          </div>
        </main>
      </div>

      <CveDetailModal
        cve={selectedCve}
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
      />
    </div>
  );
}
