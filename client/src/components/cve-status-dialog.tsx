import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Star, StarOff, Calendar, FileText, Tag } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/hooks/use-toast";
import type { Cve, CveStatus, CveStatusUpdate } from "@/types/cve";

const statusUpdateSchema = z.object({
  status: z.enum(["new", "in_progress", "done", "unlisted"]),
  listCategory: z.string().max(50).optional(),
  isPriority: z.boolean(),
  userNotes: z.string().optional(),
});

interface CveStatusDialogProps {
  cve: Cve | null;
  isOpen: boolean;
  onClose: () => void;
  onStatusUpdate: (cveId: string, updates: CveStatusUpdate) => Promise<void>;
}

export function CveStatusDialog({ cve, isOpen, onClose, onStatusUpdate }: CveStatusDialogProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof statusUpdateSchema>>({
    resolver: zodResolver(statusUpdateSchema),
    defaultValues: {
      status: "new",
      listCategory: "",
      isPriority: false,
      userNotes: "",
    },
  });

  // Update form values when CVE changes
  useEffect(() => {
    if (cve) {
      form.reset({
        status: (cve.status as CveStatus) || "new",
        listCategory: cve.listCategory || "",
        isPriority: cve.isPriority || false,
        userNotes: cve.userNotes || "",
      });
    }
  }, [cve, form]);

  const onSubmit = async (values: z.infer<typeof statusUpdateSchema>) => {
    if (!cve) return;

    setIsSubmitting(true);
    try {
      await onStatusUpdate(cve.cveId, {
        status: values.status,
        listCategory: values.listCategory || null,
        isPriority: values.isPriority,
        userNotes: values.userNotes || null,
      });

      toast({
        title: "CVE Updated",
        description: `${cve.cveId} status has been updated successfully.`,
      });

      onClose();
    } catch (error) {
      toast({
        title: "Update Failed",
        description: "Failed to update CVE status. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case 'new': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'in_progress': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'done': return 'bg-green-100 text-green-800 border-green-200';
      case 'unlisted': return 'bg-gray-100 text-gray-800 border-gray-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'new': return 'New';
      case 'in_progress': return 'In Progress';
      case 'done': return 'Done';
      case 'unlisted': return 'Unlisted';
      default: return 'Unknown';
    }
  };

  if (!cve) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px]" data-testid="cve-status-dialog">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Manage CVE Status
          </DialogTitle>
          <DialogDescription>
            Update the status, priority, and organization for {cve.cveId}
          </DialogDescription>
        </DialogHeader>

        {/* CVE Info Header */}
        <div className="bg-muted/50 p-4 rounded-lg mb-4">
          <div className="flex items-center justify-between mb-2">
            <div className="font-mono text-lg font-semibold" data-testid="dialog-cve-id">
              {cve.cveId}
            </div>
            <div className="flex items-center gap-2">
              <Badge className={`px-2 py-1 text-xs font-medium rounded-full border ${getStatusBadgeClass(cve.status)}`}>
                {getStatusLabel(cve.status)}
              </Badge>
              {cve.isPriority && (
                <span title="Priority CVE">
                  <Star className="h-4 w-4 text-yellow-500 fill-current" />
                </span>
              )}
            </div>
          </div>
          <div className="text-sm text-muted-foreground line-clamp-2">
            {cve.description}
          </div>
          <div className="flex items-center gap-4 mt-2 text-xs text-muted-foreground">
            <span>Severity: {cve.severity}</span>
            <span>CVSS: {cve.cvssScore?.toFixed(1) || 'N/A'}</span>
            <span>Published: {new Date(cve.publishedDate).toLocaleDateString()}</span>
          </div>
        </div>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            {/* Status */}
            <FormField
              control={form.control}
              name="status"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="flex items-center gap-2">
                    <Calendar className="h-4 w-4" />
                    Status
                  </FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value} data-testid="select-status">
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="new">üÜï New</SelectItem>
                      <SelectItem value="in_progress">‚è≥ In Progress</SelectItem>
                      <SelectItem value="done">‚úÖ Done</SelectItem>
                      <SelectItem value="unlisted">üì• Unlisted</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormDescription>
                    Current status of this CVE in your workflow
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Priority Flag */}
            <FormField
              control={form.control}
              name="isPriority"
              render={({ field }) => (
                <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                  <FormControl>
                    <Checkbox
                      checked={field.value}
                      onCheckedChange={field.onChange}
                      data-testid="checkbox-priority"
                    />
                  </FormControl>
                  <div className="space-y-1 leading-none">
                    <FormLabel className="flex items-center gap-2 cursor-pointer">
                      {field.value ? (
                        <Star className="h-4 w-4 text-yellow-500 fill-current" />
                      ) : (
                        <StarOff className="h-4 w-4 text-muted-foreground" />
                      )}
                      Priority CVE
                    </FormLabel>
                    <FormDescription>
                      Flag this CVE as high priority or particularly interesting
                    </FormDescription>
                  </div>
                </FormItem>
              )}
            />

            {/* List Category */}
            <FormField
              control={form.control}
              name="listCategory"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="flex items-center gap-2">
                    <Tag className="h-4 w-4" />
                    List Category
                  </FormLabel>
                  <FormControl>
                    <Input
                      placeholder="e.g. Web Servers, Network Security, Research Queue"
                      {...field}
                      data-testid="input-list-category"
                    />
                  </FormControl>
                  <FormDescription>
                    Organize this CVE into a custom list or category
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* User Notes */}
            <FormField
              control={form.control}
              name="userNotes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    Notes
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Add your personal notes about this CVE..."
                      className="min-h-[100px]"
                      {...field}
                      data-testid="textarea-notes"
                    />
                  </FormControl>
                  <FormDescription>
                    Personal notes, research findings, or lab observations
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={onClose}
                data-testid="button-cancel"
              >
                Cancel
              </Button>
              <Button
                type="submit"
                disabled={isSubmitting}
                data-testid="button-save-status"
              >
                {isSubmitting ? "Saving..." : "Save Changes"}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}