import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { Eye, Play, Copy, Download, Star, Clock, CheckCircle, Plus, Settings } from "lucide-react";
import { SiDocker } from "react-icons/si";
import type { Cve, CveStatusUpdate } from "@/types/cve";

interface CveTableProps {
  cves: Cve[];
  isLoading: boolean;
  onViewDetails: (cve: Cve) => void;
  onExport: () => void;
  onExportToSheets: () => void;
  onStatusUpdate: (id: string, updates: CveStatusUpdate) => Promise<void>;
  onBulkStatusUpdate: (ids: string[], updates: CveStatusUpdate) => Promise<void>;
  onManageStatus: (cve: Cve) => void;
}

export function CveTable({ 
  cves, 
  isLoading, 
  onViewDetails, 
  onExport, 
  onExportToSheets, 
  onStatusUpdate, 
  onBulkStatusUpdate, 
  onManageStatus 
}: CveTableProps) {
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedCves, setSelectedCves] = useState<string[]>([]);
  const [isAllSelected, setIsAllSelected] = useState(false);
  const itemsPerPage = 10;
  const totalPages = Math.ceil(cves.length / itemsPerPage);
  
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentCves = cves.slice(startIndex, endIndex);

  const getSeverityClass = (severity: string) => {
    switch (severity.toUpperCase()) {
      case 'CRITICAL': return 'severity-critical';
      case 'HIGH': return 'severity-high';
      case 'MEDIUM': return 'severity-medium';
      case 'LOW': return 'severity-low';
      default: return 'status-theoretical';
    }
  };

  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case 'new': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'in_progress': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'done': return 'bg-green-100 text-green-800 border-green-200';
      case 'unlisted': return 'bg-gray-100 text-gray-800 border-gray-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'new': return 'New';
      case 'in_progress': return 'In Progress';
      case 'done': return 'Done';
      case 'unlisted': return 'Unlisted';
      default: return 'Unknown';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };

  // Bulk selection handlers
  const handleSelectAll = (checked: boolean) => {
    setIsAllSelected(checked);
    if (checked) {
      setSelectedCves(currentCves.map(cve => cve.id));
    } else {
      setSelectedCves([]);
    }
  };

  const handleSelectCve = (id: string, checked: boolean) => {
    if (checked) {
      setSelectedCves([...selectedCves, id]);
    } else {
      setSelectedCves(selectedCves.filter(selectedId => selectedId !== id));
      setIsAllSelected(false);
    }
  };

  // Quick status update handlers
  const handleQuickStatusUpdate = async (id: string, status: string) => {
    await onStatusUpdate(id, { status: status as any });
  };

  const handlePriorityToggle = async (id: string, isPriority: boolean) => {
    await onStatusUpdate(id, { isPriority: !isPriority });
  };

  const handleBulkAction = async (action: string) => {
    if (selectedCves.length === 0) return;
    
    let updates: CveStatusUpdate = {};
    switch (action) {
      case 'mark-progress':
        updates = { status: 'in_progress' };
        break;
      case 'mark-done':
        updates = { status: 'done' };
        break;
      case 'mark-priority':
        updates = { isPriority: true };
        break;
      case 'unmark-priority':
        updates = { isPriority: false };
        break;
    }
    
    await onBulkStatusUpdate(selectedCves, updates);
    setSelectedCves([]);
    setIsAllSelected(false);
  };

  if (isLoading) {
    return (
      <div className="flex-1 bg-card rounded-lg border border-border">
        <div className="p-6 border-b border-border">
          <h3 className="text-lg font-semibold">CVE Results</h3>
        </div>
        <div className="p-6">
          <div className="animate-pulse space-y-4">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-16 bg-muted rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 bg-card rounded-lg border border-border" data-testid="cve-table">
      {/* Table Header */}
      <div className="p-6 border-b border-border">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h3 className="text-lg font-semibold">CVE Results</h3>
            {selectedCves.length > 0 && (
              <div className="flex items-center gap-2 mt-2">
                <span className="text-sm text-muted-foreground">
                  {selectedCves.length} selected
                </span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleBulkAction('mark-progress')}
                  data-testid="button-bulk-progress"
                >
                  <Clock className="w-3 h-3 mr-1" />
                  Mark In Progress
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleBulkAction('mark-done')}
                  data-testid="button-bulk-done"
                >
                  <CheckCircle className="w-3 h-3 mr-1" />
                  Mark Done
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleBulkAction('mark-priority')}
                  data-testid="button-bulk-priority"
                >
                  <Star className="w-3 h-3 mr-1" />
                  Mark Priority
                </Button>
              </div>
            )}
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant="secondary"
              size="sm"
              onClick={onExport}
              data-testid="button-export-csv"
            >
              <Download className="w-4 h-4 mr-1" />
              Export
            </Button>
            <Button
              size="sm"
              onClick={onExportToSheets}
              data-testid="button-export-sheets"
            >
              <Download className="w-4 h-4 mr-1" />
              Google Sheets
            </Button>
          </div>
        </div>
        <div className="text-sm text-muted-foreground" data-testid="results-count">
          Showing {startIndex + 1}-{Math.min(endIndex, cves.length)} of {cves.length} CVEs
        </div>
      </div>
      
      {/* Table Content */}
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-muted/20">
            <tr>
              <th className="text-left p-4 font-medium w-12">
                <Checkbox
                  checked={isAllSelected}
                  onCheckedChange={handleSelectAll}
                  data-testid="checkbox-select-all"
                />
              </th>
              <th className="text-left p-4 font-medium">CVE ID</th>
              <th className="text-left p-4 font-medium">Severity</th>
              <th className="text-left p-4 font-medium">Technology</th>
              <th className="text-left p-4 font-medium">CVE Status</th>
              <th className="text-left p-4 font-medium">Priority</th>
              <th className="text-left p-4 font-medium">PoC Status</th>
              <th className="text-left p-4 font-medium">CVSS</th>
              <th className="text-left p-4 font-medium">Actions</th>
            </tr>
          </thead>
          <tbody>
            {currentCves.length === 0 ? (
              <tr>
                <td colSpan={9} className="p-8 text-center text-muted-foreground">
                  No CVEs found matching the current filters.
                </td>
              </tr>
            ) : (
              currentCves.map((cve) => (
                <tr 
                  key={cve.id} 
                  className={`border-b border-border hover:bg-muted/10 transition-colors ${selectedCves.includes(cve.id) ? 'bg-muted/20' : ''}`}
                  data-testid={`cve-row-${cve.cveId}`}
                >
                  {/* Selection Checkbox */}
                  <td className="p-4">
                    <Checkbox
                      checked={selectedCves.includes(cve.id)}
                      onCheckedChange={(checked) => handleSelectCve(cve.id, checked as boolean)}
                      data-testid={`checkbox-select-${cve.cveId}`}
                    />
                  </td>
                  
                  {/* CVE ID */}
                  <td className="p-4">
                    <div className="font-mono text-sm">
                      <span data-testid={`cve-id-${cve.cveId}`}>{cve.cveId}</span>
                      <div className="text-xs text-muted-foreground mt-1">
                        Published: {formatDate(cve.publishedDate)}
                      </div>
                    </div>
                  </td>
                  
                  {/* Severity */}
                  <td className="p-4">
                    <Badge className={`px-2 py-1 text-xs font-medium rounded-full border ${getSeverityClass(cve.severity)}`}>
                      {cve.severity}
                    </Badge>
                  </td>
                  
                  {/* Technology */}
                  <td className="p-4">
                    <div className="text-sm">
                      <div data-testid={`cve-technology-${cve.cveId}`}>{cve.technology || cve.affectedProduct || 'Unknown'}</div>
                      <div className="text-xs text-muted-foreground">{cve.category || 'Other'}</div>
                    </div>
                  </td>
                  
                  {/* CVE Status */}
                  <td className="p-4">
                    <div className="flex items-center gap-2">
                      <Badge className={`px-2 py-1 text-xs font-medium rounded-full border ${getStatusBadgeClass(cve.status)}`}>
                        {getStatusLabel(cve.status)}
                      </Badge>
                      {cve.status === 'new' && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleQuickStatusUpdate(cve.id, 'in_progress')}
                          title="Mark In Progress"
                          data-testid={`button-start-${cve.cveId}`}
                        >
                          <Clock className="w-3 h-3" />
                        </Button>
                      )}
                      {cve.status === 'in_progress' && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleQuickStatusUpdate(cve.id, 'done')}
                          title="Mark Done"
                          data-testid={`button-complete-${cve.cveId}`}
                        >
                          <CheckCircle className="w-3 h-3" />
                        </Button>
                      )}
                    </div>
                  </td>
                  
                  {/* Priority */}
                  <td className="p-4">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handlePriorityToggle(cve.id, cve.isPriority)}
                      title={cve.isPriority ? "Remove Priority" : "Mark Priority"}
                      data-testid={`button-priority-${cve.cveId}`}
                    >
                      <Star className={`w-4 h-4 ${cve.isPriority ? 'text-yellow-500 fill-current' : 'text-muted-foreground'}`} />
                    </Button>
                  </td>
                  
                  {/* PoC Status */}
                  <td className="p-4">
                    <div className="flex items-center gap-2">
                      {cve.hasPublicPoc && (
                        <Badge className="px-2 py-1 text-xs font-medium rounded-full border status-exploitable">
                          PoC Available
                        </Badge>
                      )}
                      {cve.isDockerDeployable && (
                        <SiDocker className="text-accent" title="Docker Deployable" />
                      )}
                      {cve.isCurlTestable && (
                        <span className="text-blue-400" title="Curl/Nmap Testable">🔍</span>
                      )}
                    </div>
                  </td>
                  
                  {/* CVSS */}
                  <td className="p-4">
                    <div className="font-mono text-sm" data-testid={`cve-score-${cve.cveId}`}>
                      {cve.cvssScore?.toFixed(1) || 'N/A'}
                    </div>
                  </td>
                  
                  {/* Actions */}
                  <td className="p-4">
                    <div className="flex items-center gap-1">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => onViewDetails(cve)}
                        data-testid={`button-view-${cve.cveId}`}
                        title="View Details"
                      >
                        <Eye className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        data-testid={`button-deploy-${cve.cveId}`}
                        title="Deploy Lab"
                      >
                        <Play className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => onManageStatus(cve)}
                        data-testid={`button-manage-${cve.cveId}`}
                        title="Manage Status"
                      >
                        <Settings className="w-4 h-4" />
                      </Button>
                    </div>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
      
      {/* Pagination */}
      {totalPages > 1 && (
        <div className="p-6 border-t border-border">
          <div className="flex items-center justify-between">
            <div className="text-sm text-muted-foreground" data-testid="pagination-info">
              Page {currentPage} of {totalPages}
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(currentPage - 1)}
                disabled={currentPage === 1}
                data-testid="button-previous-page"
              >
                Previous
              </Button>
              
              {/* Page numbers */}
              {[...Array(Math.min(5, totalPages))].map((_, i) => {
                const pageNum = i + 1;
                return (
                  <Button
                    key={pageNum}
                    variant={currentPage === pageNum ? "default" : "outline"}
                    size="sm"
                    onClick={() => setCurrentPage(pageNum)}
                    data-testid={`button-page-${pageNum}`}
                  >
                    {pageNum}
                  </Button>
                );
              })}
              
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(currentPage + 1)}
                disabled={currentPage === totalPages}
                data-testid="button-next-page"
              >
                Next
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
